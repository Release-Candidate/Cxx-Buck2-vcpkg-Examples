load("@prelude//toolchains:cxx.bzl", "system_cxx_toolchain")
load("@prelude//toolchains:genrule.bzl", "system_genrule_toolchain")
load("@prelude//toolchains:python.bzl", "system_python_bootstrap_toolchain")

#system_cxx_toolchain(
#    name = "cxx",
#    cxx_compiler = select({ "prelude//os:macos": "/opt/homebrew/opt/llvm/bin/clang++"}),
#    visibility = ["PUBLIC"],
#)

system_cxx_toolchain(
    name = "cxx",
    compiler_type = "clang",
    cxx_compiler = select({
        "prelude//os:linux": "clang++",
        "prelude//os:macos": "/opt/homebrew/opt/llvm/bin/clang++",
        "prelude//os:windows": "clang++"
    }),
    cxx_flags = select({
        "config//os:linux": [
                "-std=c++2c",
                "-Wall",
                "-Wunused-variable",
                "-Wunused-const-variable",],
        "config//os:macos": [
                "-std=c++2c",
                "-Wall",
                "-Wunused-variable",
                "-Wunused-const-variable",
                 "-D__STDC_CONSTANT_MACROS",
                "-D__STDC_FORMAT_MACROS",
                "-D__STDC_LIMIT_MACROS",
                "-I/opt/homebrew/opt/llvm/include/",
                "-L/opt/homebrew/opt/llvm/lib/c++",
                "-stdlib=libc++",
                "-Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++",
                "-Wl,-search_paths_first",
                "-Wl,-headerpad_max_install_names",],
        "config//os:windows": [
                "-std=c++2c",
                "-Wall",
                "-Wunused-variable",
                "-Wunused-const-variable",],
    }),
    visibility = ["PUBLIC"],
)

system_genrule_toolchain(
    name = "genrule",
    visibility = ["PUBLIC"],
)

system_python_bootstrap_toolchain(
    name = "python_bootstrap",
    visibility = ["PUBLIC"],
)
